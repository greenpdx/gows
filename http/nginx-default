#
# nginx default : GOWS nginx configure file
# Copyright (C) 2013 Shaun Savage <savages@savages.com>
# 
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##
upstream wssock {
	server localhost:8088;
}

upstream gows {
	server localhost:8088;
#	server unix:/tmp/gows.sock;
}

#ldap_server test1 {
#      url ldap://localhost:389/DC=savages,DC=net?sAMAccountName?sub?(objectClass=person);
#      binddn cn=admin, dc=savages, dc=net;
#      binddn_passwd Hello1;
#      group_attribute uniquemember;
#      group_attribute_is_dn on;
#      require valid_user;
#}

#upstream database {
#	postgres_server 127.0.0.1 dbname=gows user=gows password=gows;
#}

server {
	#listen   80; ## listen for ipv4; this line is default and implied
	listen   [::]:80 default ipv6only=off; ## listen for ipv6
#	listen 80 default_server;
#	listen [::]:80 default_server ipv6only=on;

	root /var/www/root;
	index index.html;

		allow 127.0.0.1;
		allow ::1;
        allow 192.168.1.0/24;
        deny all;
        auth_basic "Restricted";      #For Basic Auth
        #auth_digest_expires
        auth_basic_user_file /etc/nginx/passwd.txt;  #For Basic Auth
        satisfy any;


	# Make site accessible from http://localhost/
	server_name localhost;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to index.html
		try_files $uri $uri/ /index.html;
		# Uncomment to enable naxsi on this location
		# include /etc/nginx/naxsi.rules
	}

	location /doc/ {
		alias /usr/share/doc/;
		autoindex on;
		allow 127.0.0.1;
		allow ::1;
		deny all;
	}

	location /go/ {
		proxy_pass http://wssock;
		include /etc/nginx/fastcgi_params;
	}

	location /ws/ {
		proxy_pass http://localhost:8088/ws;
		include /etc/nginx/fastcgi_params;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_http_version 1.1;
		proxy_connect_timeout 600;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_send_timeout      300;
		proxy_read_timeout      300;
		proxy_buffers           32 4k;
		client_body_timeout     300;
		proxy_ignore_client_abort on;
#		auth_ldap "Closed content";

#	    auth_ldap_require user 'cn=Super User,ou=user,dc=example,dc=com';
#	    auth_ldap_require group 'cn=admins,ou=group,dc=example,dc=com';
#	    auth_ldap_require group 'cn=user,ou=group,dc=example,dc=com';
#	    auth_ldap_satisfy any;
	}

	location /dev {
		alias /home/savages/gows-chapter/content/;
		autoindex on;
#		auth_ldap "Closed content";
#		$sent_http_
		#allow 127.0.0.1;
		#deny all;
	}

	location /status {
		stub_status on;
	}

	location /auth {
		if ($login = '') {
			return 403;
		}

     		proxy_redirect off;
     		proxy_buffering off;
     		proxy_set_header        Host            $host;
    		proxy_set_header        X-Real-IP       $remote_addr;
		proxy_set_header	X-Real-Port	$remote_port;
     		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass_request_headers on;
		#postgres_pass database;
		#postgres_query HEAD GET "select nextval('nextsession')";
		#postgres_rewrite no_rows 403;
		#postgres_output text;
		#postgres_set $nextval 0 0 required;
		#set $args $args&sess=$nextval;
		proxy_pass http://gows;
	}

	location /login/regst {
     		proxy_redirect off;
     		proxy_buffering off;
     		proxy_set_header        Host            $host;
    		proxy_set_header        X-Real-IP       $remote_addr;
    		proxy_set_header        X-Real-Port     $remote_port;
     		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass_request_headers on;
		proxy_pass http://gows;
	}

	location /login/forgot {
     		proxy_redirect off;
     		proxy_buffering off;
     		proxy_set_header        Host            $host;
    		proxy_set_header        X-Real-IP       $remote_addr;
    		proxy_set_header        X-Real-Port     $remote_port;
     		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_pass_request_headers on;
		proxy_pass http://gows;
	}


	location /login {
		if ($args) {
			set $login 1;
			rewrite ^/login/login(.*)$ /auth$1;
		} 
		alias /var/www/login;

	}

	location /gows/ws {
		if ($http_cookie !~* 'gows') {
			rewrite ^/gows(.*)$ /login$1;
		}
     		proxy_redirect off;
     		proxy_buffering off;
     		proxy_set_header        Host            $host;
    		proxy_set_header        X-Real-IP       $remote_addr;
    		proxy_set_header        X-Real-Port     $remote_port;
     		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Upgrade $http_upgrade;
    		proxy_set_header Connection "upgrade";
		proxy_http_version 1.1;
		proxy_pass_request_headers on;
		proxy_pass http://gows;
	}


	location /gows {
		if ($http_cookie !~* 'gows') {
			rewrite ^/gows(.*)$ /login$1;
		}
		alias /var/www/gows;
	}

	location /gows/ws {
		if ($http_cookie !~* 'gows') {
			rewrite ^/gows(.*)$ /login$1;
		}
     		proxy_redirect off;
     		proxy_buffering off;
     		proxy_set_header        Host            $host;
    		proxy_set_header        X-Real-IP       $remote_addr;
		proxy_set_header	X-Real-Port	$remote_port;
     		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Upgrade $http_upgrade;
    		proxy_set_header Connection "upgrade";
		proxy_http_version 1.1;
		proxy_pass_request_headers on;
		proxy_pass http://gows;
	}


	location /gows {
		if ($http_cookie !~* 'gows') {
			rewrite ^/gows(.*)$ /login$1;
		}
		alias /var/www/gows;
	}

	location /demo/ws {
		if ($http_cookie !~* 'demo') {
			rewrite ^/gows(.*)$ /login$1;
		}
     		proxy_redirect off;
     		proxy_buffering off;
     		proxy_set_header        Host            $host;
    		proxy_set_header        X-Real-IP       $remote_addr;
    		proxy_set_header        X-Real-Port     $remote_port;
     		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Upgrade $http_upgrade;
    		proxy_set_header Connection "upgrade";
		proxy_http_version 1.1;
		proxy_pass_request_headers on;
		proxy_pass http://gows;
	}


	location /demo {
		if ($http_cookie !~* 'demo') {
			rewrite ^/demo(.*)$ /login$1;
		}
		alias /var/www/demo;
	}
}

	# Only for nginx-naxsi : process denied requests
	#location /RequestDenied {
		# For example, return an error code
		#return 418;
	#}

	#error_page 404 /404.html;

	# redirect server error pages to the static page /50x.html
	#
	#error_page 500 502 503 504 /50x.html;
	#location = /50x.html {
	#	root /usr/share/nginx/www;
	#}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	#	# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
	#
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php5-fpm:
	#	fastcgi_pass unix:/var/run/php5-fpm.sock;
	#	fastcgi_index index.php;
	#	include fastcgi_params;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}



# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}


# HTTPS server
#
#server {
#	listen 443;
#	server_name localhost;
#
#	root html;
#	index index.html index.htm;
#
#	ssl on;
#	ssl_certificate cert.pem;
#	ssl_certificate_key cert.key;
#
#	ssl_session_timeout 5m;
#
#	ssl_protocols SSLv3 TLSv1;
#	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
#	ssl_prefer_server_ciphers on;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}
